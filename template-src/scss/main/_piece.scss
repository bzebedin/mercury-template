// This program is part of the OpenCms Mercury Template.
//
// Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**********
 * Source file: _piece.scss
 */

// Possible piece grid variations, as used by the element settings:
//
// 0. Heading, Image, Text, Link (all full)
// 1. Image, Heading, Text, Link (all full)
// 2. Heading on top, Image left, Text and Link right (separate column)
// 3. Heading on top, Image right, Text and Link left (separate column)
// 4. Heading on top, Image left, Text and Link right (floating around image)
// 5. Heading on top, Image right, Text and Link left (floating around image)
// 6. Image left, Heading, Text and Link right (separate column)
// 7. Image right, Heading, Text and Link left (separate column)
// 8. Image left, Heading, Text and Link right (floating around image)
// 9. Image right, Heading, Text and Link left (floating around image)
//
// 50. Title as image overlay (Detail page only)
// 99. Default value for content section - treated internally as '4' (Content section only)

@function get-col-flex-size($cols, $reduce: 0) {
    @if ($cols < 12) {
        @return calc((100% + #{$grid-gutter-width}) * #{$cols / $grid-columns} - #{(0.5 * $grid-gutter-width) + $reduce});
    } @else {
        @return 100%;
    }
}

@function get-col-float-size($cols, $reduce: 0) {
    @if ($cols < 12) {
        @return calc((100% + #{$grid-gutter-width}) * #{$cols / $grid-columns} - #{$grid-gutter-width + $reduce});
    } @else {
        @return 100%;
    }
}

@mixin make-piece-col($cols, $reduce: 0) {
    flex: 0 0 get-col-flex-size($cols, $reduce);
    max-width: get-col-flex-size($cols, $reduce);
}

$piece-cols:   (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) !default; // supported column sizes for the piece visual

.piece {
    display: block;
    position: relative;

    > .visual {
        margin-bottom: $default-margin-small;
        width: 100%;

        @include copyright-subtitle;
    }

    &.only-visual {
        > .visual {
            margin-bottom: 0;
        }
    }

    &.centered {
        .heading > .piece-heading,
        > .body .text {
            text-align: center;
        }
    }

    .heading {
        > .piece-heading {
            text-overflow: ellipsis;
            overflow: hidden;
        }
        > .piece-heading-link {
            &:hover {
                text-decoration: none;
            }
        }
        &:last-child {
            // if the heading is the last child of the piece, don't add the bottom margin
            > .piece-heading-link > .piece-heading,
            > .piece-heading {
                margin-bottom:0;
            }
        }
    }

    @if ($piece-headings-margin-bottom != $headings-margin-bottom) {
        .piece-heading {
            margin-bottom: $piece-headings-margin-bottom;
        }
    }

    @if ($piece-btn-padding != $btn-def-padding) {
        .piece-btn {
            padding: $piece-btn-padding;
        }
    }

    .piece-btn-lg {
        padding: $piece-btn-lg-padding;
    }

    > .body {
        .text {
            > * {
                // add margins for all elements in text piece
                margin-bottom: $piece-text-margin;
                &:last-child {
                    // last element in text must not add margin
                    margin-bottom: 0;
                }
            }
        }
        + .link, // link may also be a sibling to the body
        .text + .link {
            // add margin between body / text and link
            margin-top: $piece-text-to-link-margin;
        }
    }

    &.element.only-heading {
        // if piece has only a header, add a margin the same height as used by the headers to the whole element
        margin-bottom: $piece-headings-margin-bottom;
    }

    @include media-breakpoint-down(sm) {

        @if ($piece-hyphens-headings-xs) {
            .heading {
                hyphens: auto;
                word-wrap: break-word;
            }
        }
        @if ($piece-hyphens-text-xs) {
            // add word hyphenation to piece text for mobile displays
            > .body {
                .text {
                    hyphens: auto;
                    word-wrap: break-word;
                }
            }
        }

        // uncomment this if images floating left in desktop should also float left on mobile
        // attention: if headline is displayed above the image, this does not look good
        // &.p-r {
        //    > .visual {
        //        float: right;
        //        + div {
        //            @include clearfix-before;
        //        }
        //    }
        // }

        @each  $piece-col-size in $piece-cols {
            // generate size variations for the mobile visual column
            &.p-xs-#{""+$piece-col-size} {
                > .visual {
                    width: get-col-float-size($piece-col-size);
                }
            }
        }
    }
}

@include media-breakpoint-up(md) {

    .flex-col > .piece.full:only-child {
        // this makes single content elements in a .flex-col using the complete element height
        // and allows to align links at the bottom
        flex-grow: 1;
        @include text-tile(false);
    }

    .piece {

        @if ($piece-hyphens-headings-md) {
            .heading {
                hyphens: auto;
                word-wrap: break-word;
            }
        }
        @if ($piece-hyphens-text-md) {
            // add word hyphenation to piece text for mobile displays
            > .body {
                .text {
                    hyphens: auto;
                    word-wrap: break-word;
                }
            }
        }

        &.has-visual {
            @include clearfix-before;
        }

        &.flex {
            display: flex;
            flex-wrap: wrap;
            flex-direction: row;

            >.heading,
            >.link {
                @include make-piece-col(12);
            }

            > .heading,
            > .link,
            > .visual,
            > .body {
                position: relative;
                width: 100%;
            }
            > .visual {
                // in flex grid there must be no bottom margin below the visual
                margin-bottom: 0;
            }

            &.right {
                > .visual {
                    order: 13;
                    padding-left: 0.5 * $grid-gutter-width;
                }
                > .body {
                    padding-right: 0.5 * $grid-gutter-width;
                }
            }
            &.left {
                > .visual {
                    padding-right: 0.5 * $grid-gutter-width;
                }
                > .body {
                    padding-left: 0.5 * $grid-gutter-width;
                }
            }
        }


        &.float {
            &.left {
                > .visual {
                    float: left;
                    margin-right: $grid-gutter-width;
                }
            }

            &.right {
                > .visual {
                    float: right;
                    margin-left: $grid-gutter-width;
                }
            }
        }

        @each  $piece-col-size in $piece-cols {
            // generate size variations for the visual column
            &.p-md-#{""+$piece-col-size} {
                &.flex {
                    > .visual {
                        @include make-piece-col($piece-col-size);
                    }
                    > .body {
                        @include make-piece-col($grid-columns - $piece-col-size, 1);
                    }
                }
                &.full,
                &.float {
                    > .visual {
                        width: get-col-float-size($piece-col-size );
                    }
                }
                &.full {
                    // center visual in case the full width is not used
                    > .visual {
                        margin-left: auto;
                        margin-right: auto;
                    }
                }
            }
        }
    }
}


.intro-headline {
    // formatting for headings with intro
    > span {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    > .intro {
        @include intro-header;
    }
}


// labels
.piece .text {
    .label {
        display: inline-block;
        padding: 0 0.4rem;
        color: white;

        &.label-orange {
            background-color: $con-col-orange;
        }
        &.label-red {
            background-color: $con-col-red;
        }
        &.label-cyan {
            background-color: $con-col-cyan;
        }
    }
}