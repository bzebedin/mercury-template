{"version":3,"sources":["webpack:///./template-src/js/map-google.js"],"names":["jQ","DEBUG","__webpack_require__","r","__webpack_exports__","d","showMarkers","initGoogleMaps","init","m_maps","m_mapData","m_mapStyle","m_apiKey","m_googleGeocoder","showInfo","mapId","infoId","console","info","map","infoWindows","i","length","close","geocode","getGeocode","open","marker","hideAllInfo","setInfo","results","status","infoWindow","addressFound","google","maps","GeocoderStatus","OK","formatGeocode","warn","position","infoContent","getContent","replace","setContent","result","street","strNum","zip","city","foundAdr","address_components","t","String","types","indexOf","long_name","formatted_address","Geocoder","latLng","loadGoogleApi","locale","Mercury","getInfo","mapKey","addLibs","isOnlineProject","loadScript","shadeColor","color","percent","f","parseInt","slice","p","R","G","B","Math","round","toString","getPuempel","path","scale","fillOpacity","fillColor","strokeColor","strokeWeight","group","markers","g","decodeURIComponent","setVisible","showSingleMap","mapData","id","mapOptions","zoom","styles","scrollwheel","mapTypeId","eval","type","streetViewControl","mapTypeControlOptions","style","MapTypeControlStyle","DROPDOWN_MENU","mapTypeIds","Array","MapTypeId","ROADMAP","SATELLITE","HYBRID","TERRAIN","center","LatLng","centerLat","centerLng","Map","document","getElementById","event","addListener","this","setOptions","groups","groupsFound","point","getThemeJSON","Marker","lat","lng","title","icon","index","push","InfoWindow","content","hidden","showMap","log","currentTarget","mapToShow","jQuery","debug","$mapElements","PrivacyPolicy","cookiesAccepted","each","$mapElement","data","hasOwnProperty","ratio","width","outerWidth","splits","split","wRatio","Number","hRatio","factor","height","outerHeight","attr","isElementHidden","removeClass","markDisabled","hideElement"],"mappings":"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","file":"mercury-map-google.js","sourcesContent":["/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\n// all initialized Google maps\nvar m_maps = {};\n\n// all map data sets found on the page, as array for easy iteration\nvar m_mapData = [];\n\n// map styling\nvar m_mapStyle = [];\n\n// API key for accessing the map data\nvar m_apiKey;\n\n// the Google geocode object, used for resolving coordinates to address names\nvar m_googleGeocoder = null;\n\nfunction showInfo(mapId, infoId) {\n\n    if (DEBUG) console.info(\"GoogleMap showInfo() called with map id: \" + mapId + \" info id: \" + infoId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        if (i != infoId) {\n            infoWindows[i].close();\n        } else {\n            if (infoWindows[i].geocode == \"true\") {\n                if (DEBUG) console.info(\"showInfo() geocode lookup for \" + mapId);\n                getGeocode(infoWindows[i]);\n                infoWindows[i].geocode = \"false\";\n            }\n            infoWindows[i].open(\n                map,\n                infoWindows[i].marker\n            );\n        }\n    }\n}\n\nfunction hideAllInfo(mapId) {\n\n    if (DEBUG) console.info(\"GoogleMap hideAllInfo() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        infoWindows[i].close();\n    }\n}\n\nfunction setInfo(results, status, infoWindow) {\n\n    if (DEBUG) console.info(\"GoogleMap setInfo() geocode lookup returned status \" + status);\n    var addressFound = \"\";\n    if (status == google.maps.GeocoderStatus.OK) {\n        if (results[0]) {\n            addressFound = formatGeocode(results[0]);\n        }\n    } else {\n        console.warn(\"GoogleMap GeoCoder returned error status '\" + status + \"' for coordinates \" + infoWindow.marker.position);\n    }\n    // replace content in info window\n    var infoContent = infoWindow.getContent();\n    infoContent = infoContent.replace(\"<div class='geoAdr'></div>\", addressFound);\n    infoWindow.setContent(infoContent);\n}\n\nfunction formatGeocode(result) {\n\n    // returns the address from a geocode result in nicely formatted way\n    var street = \"\";\n    var strNum = \"\";\n    var zip = \"\";\n    var city = \"\";\n    var foundAdr = false;\n\n    for (var i = 0; i < result.address_components.length; i++) {\n        var t = String(result.address_components[i].types);\n        if (street == \"\" && t.indexOf(\"route\") != -1) {\n            street = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"street_number\") != -1) {\n            strNum = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"postal_code\") != -1) {\n            zip = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (city == \"\" && t.indexOf(\"locality\") != -1) {\n            city = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n    }\n    if (foundAdr == true) {\n        return street + \" \" + strNum + \"<br/>\" + zip + \" \" + city;\n    } else {\n        return result.formatted_address;\n    }\n}\n\nfunction getGeocode(infoWindow) {\n\n    if (m_googleGeocoder == null) {\n        // initialize global geocoder object if required\n        m_googleGeocoder = new google.maps.Geocoder();\n    }\n\n    m_googleGeocoder.geocode({'latLng': infoWindow.marker.position}, function(results, status) {\n        setInfo(results, status, infoWindow);\n    });\n}\n\nfunction loadGoogleApi() {\n\n    var locale = Mercury.getInfo(\"locale\");\n    var mapKey = \"\"\n    if (m_apiKey != null) {\n        mapKey = \"&key=\" + m_apiKey;\n    }\n    var addLibs = \"\";\n    if (! Mercury.isOnlineProject()) {\n        // need to load places API for OpenCms map editor\n        addLibs = \"&libraries=places\"\n    }\n    if (DEBUG) console.info(\"GoogleMap API key: \" + (mapKey == '' ? '(undefined)' : mapKey));\n    jQ.loadScript(\"https://maps.google.com/maps/api/js?callback=GoogleMap.initGoogleMaps&language=\" + locale + addLibs + mapKey, {}, DEBUG);\n}\n\n\n// See: https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\nfunction shadeColor(color, percent) {\n\n    var f=parseInt(color.slice(1),16),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=f>>16,G=f>>8&0x00FF,B=f&0x0000FF;\n    return \"#\"+(0x1000000+(Math.round((t-R)*p)+R)*0x10000+(Math.round((t-G)*p)+G)*0x100+(Math.round((t-B)*p)+B)).toString(16).slice(1);\n}\n\n\nfunction getPuempel(color) {\n\n    var shade = shadeColor(color, -0.4);\n    return {\n        path: 'M0-37.06c-5.53 0-10 4.15-10 9.26 0 7.4 8 9.26 10 27.8 2-18.54 10-20.4 10-27.8 0-5.1-4.47-9.26-10-9.26zm.08 7a2.9 2.9 0 0 1 2.9 2.9 2.9 2.9 0 0 1-2.9 2.9 2.9 2.9 0 0 1-2.9-2.9 2.9 2.9 0 0 1 2.9-2.9z',\n        scale: 1,\n        fillOpacity: 1,\n        fillColor: color,\n        strokeColor: shade,\n        strokeWeight: 1\n    };\n}\n\n/****** Exported functions ******/\n\nexport function showMarkers(mapId, group) {\n\n    if (DEBUG) console.info(\"GoogleMap showMapMarkers() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    if (map) {\n        var markers = map.markers;\n        var g = decodeURIComponent(group);\n        hideAllInfo(mapId);\n        for (var i = 0; i < markers.length; i++) {\n            if (markers[i].group == g || g == 'showall') {\n                markers[i].setVisible(true);\n            } else {\n                markers[i].setVisible(false);\n            }\n        }\n    }\n}\n\nfunction showSingleMap(mapData){\n\n    var mapId = mapData.id;\n\n    if (DEBUG) console.info(\"GoogleMap initializing map: \" + mapId);\n    var mapOptions = {\n        zoom: parseInt(mapData.zoom),\n        styles: m_mapStyle,\n        scrollwheel: false,\n        mapTypeId: eval(\"google.maps.MapTypeId.\" + mapData.type),\n        streetViewControl: false,\n        mapTypeControlOptions: {\n            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n            mapTypeIds: new Array(\n                google.maps.MapTypeId.ROADMAP,\n                google.maps.MapTypeId.SATELLITE,\n                google.maps.MapTypeId.HYBRID,\n                google.maps.MapTypeId.TERRAIN\n            )\n        },\n        center: new google.maps.LatLng(mapData.centerLat, mapData.centerLng)\n    }\n\n    // create the map\n    var map = new google.maps.Map(document.getElementById(mapId), mapOptions);\n\n    // enable mouse wheel scrolling after click\n    google.maps.event.addListener(map, 'click', function(event){\n        this.setOptions({scrollwheel:true});\n    });\n\n    // map markers and info windows\n    var markers = [];\n    var infoWindows = [];\n    var groups = {};\n    var groupsFound = 0;\n\n    if (typeof mapData.markers != \"undefined\") {\n        for (var p=0; p < mapData.markers.length; p++) {\n\n            var point = mapData.markers[p];\n            var group = decodeURIComponent(point.group);\n            if (typeof groups[group] === \"undefined\" ) {\n                // Array? Object?\n                // see http://stackoverflow.com/questions/9526860/why-does-a-string-index-in-a-javascript-array-not-increase-the-length-size\n                var color = Mercury.getThemeJSON(\"map-color[\" + groupsFound++ + \"]\", \"#ffffff\");\n                if (DEBUG) console.info(\"GoogleMap new marker group added: \" + group + \" with color: \" + color);\n                groups[group] = getPuempel(color);\n            }\n\n            // get marker data from calling object\n            var marker = new google.maps.Marker({\n                position: new google.maps.LatLng(point.lat, point.lng),\n                map: map,\n                title: decodeURIComponent(point.title),\n                group: group,\n                icon: groups[group],\n                info: decodeURIComponent(point.info),\n                index: p,\n                mapId: mapId,\n                geocode: point.geocode\n            });\n\n            // add marker to marker map\n            markers.push(marker);\n\n            // initialize info window\n            var infoWindow = new google.maps.InfoWindow({\n                content: marker.info,\n                marker: marker,\n                geocode: point.geocode,\n                index: p\n            });\n\n            // add marker to marker map\n            infoWindows.push(infoWindow);\n\n            if (DEBUG) console.info(\"GoogleMap attaching Event lister: \" + p + \" to map id \" + mapId);\n\n            // attach event listener that shows info window to marker\n            // see http://you.arenot.me/2010/06/29/google-maps-api-v3-0-multiple-markers-multiple-infowindows/\n            marker.addListener('click', function() {\n                showInfo(this.mapId, this.index);\n            });\n        }\n    }\n\n    // store map in global array, required e.g. to select marker groups etc.\n    var map = {\n        'id': mapId,\n        'map': map,\n        'markers': markers,\n        'infoWindows': infoWindows\n    };\n    m_maps[mapId] = map;\n}\n\nexport function initGoogleMaps() {\n\n    if (DEBUG) console.info(\"GoogleMap initGoogleMaps() called with data for \" + m_mapData.length + \" maps!\" );\n       for (var i=0; i < m_mapData.length; i++) {\n         if(!m_mapData[i].hidden){\n             showSingleMap(m_mapData[i]);\n          }\n       }\n}\n\nfunction showMap(event){\n\n    // called by click on hidden map element in edit mode\n    if (DEBUG) {console.log(\"GoogleMap show map with id: \"+event.currentTarget.id);}\n    var mapToShow= event.currentTarget;\n\n    for(var i=0; i<m_mapData.length;i++){\n        if(m_mapData[i].id == mapToShow.id){\n            m_mapData[i].hidden=false;\n            showSingleMap(m_mapData[i]);\n        }\n    }\n}\n\n/****** Exported functions ******/\n\nexport function init(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    m_apiKey = Mercury.getInfo(\"googleApiKey\");\n\n    if (DEBUG) {\n        console.info(\"GoogleMap.init()\");\n        if (m_apiKey != null) {\n            // Goggle map key is read in mercury:pageinfo tag and read to JavaScript via Mercury.init()\n            console.info(\"GoogleMap API key is: \" + Mercury.getInfo(\"googleApiKey\"));\n        } else {\n            console.info(\"GoogleMap API key not set - Google maps not activated\");\n        }\n    }\n\n    var $mapElements = jQ('.map-google .mapwindow');\n    if (DEBUG) console.info(\"GoogleMap .map-google elements found: \" + $mapElements.length);\n\n    if ($mapElements.length > 0) {\n\n        if (m_apiKey != null) {\n\n            if (PrivacyPolicy.cookiesAccepted()) {\n\n                // initialize map style from JSON stored in CSS\n                m_mapStyle = Mercury.getThemeJSON(\"map-style\", []);\n\n                // initialize map sections with values from data attributes\n                $mapElements.each(function(){\n                    var $mapElement = jQ(this);\n\n                    if (typeof $mapElement.data(\"map\") != \"undefined\") {\n                        var mapData = $mapElement.data(\"map\");\n                        if (mapData.hasOwnProperty(\"ratio\")) {\n                            var ratio = mapData.ratio;\n                            var width = $mapElement.outerWidth();\n                            var splits = ratio.split(\"-\");\n                            var wRatio = Number(splits[0]);\n                            var hRatio = Number(splits[1]);\n                            var factor = hRatio / wRatio;\n                            var height = Math.round(width * factor);\n                            if (DEBUG) console.info(\"mapData ratio:\" + ratio + \" wR=\" + wRatio + \" hR=\" + hRatio + \" width=\" + width + \" height=\" + height);\n                            $mapElement.outerHeight(height);\n                        }\n                        mapData.id = $mapElement.attr(\"id\");\n                        mapData.hidden=Mercury.isElementHidden($mapElement, showMap);\n                        if (DEBUG) console.info(\"GoogleMap found with id: \" + mapData.id);\n                        m_mapData.push(mapData);\n                        $mapElement.removeClass('placeholder');\n                    }\n                });\n\n                // load the Google map API\n                loadGoogleApi();\n\n            } else {\n                if (DEBUG) console.info(\"GoogleMap cookies not accepted by the user - Google maps are disabled!\");\n\n                $mapElements.each(function() {\n                    var $mapElement =  jQ(this);\n                    $mapElement.removeClass('placeholder');\n                    PrivacyPolicy.markDisabled($mapElement);\n                });\n            }\n\n        } else {\n\n            // activate the hide message (no API key found)\n            $mapElements.each(function() {\n                var $mapElement = jQ(this);\n                if (typeof $mapElement.data(\"map\") != \"undefined\") {\n                    Mercury.hideElement($mapElement);\n                }\n            });\n        }\n    }\n}\n"],"sourceRoot":""}