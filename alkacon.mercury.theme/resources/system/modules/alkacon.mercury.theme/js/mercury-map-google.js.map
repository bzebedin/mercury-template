{"version":3,"sources":["webpack:///./template-src/js/map-google.js"],"names":["jQ","DEBUG","m_maps","m_mapData","m_mapStyle","m_apiKey","m_googleGeocoder","showInfo","mapId","infoId","console","info","map","infoWindows","i","length","close","geocode","getGeocode","open","marker","hideAllInfo","setInfo","results","status","infoWindow","addressFound","google","maps","GeocoderStatus","OK","formatGeocode","warn","position","infoContent","getContent","replace","setContent","result","street","strNum","zip","city","foundAdr","address_components","t","String","types","indexOf","long_name","formatted_address","Geocoder","loadGoogleApi","locale","Mercury","getInfo","mapKey","addLibs","isOnlineProject","loadScript","shadeColor","color","percent","f","parseInt","slice","p","R","G","B","Math","round","toString","getPuempel","path","scale","fillOpacity","fillColor","strokeColor","strokeWeight","showMarkers","group","markers","g","decodeURIComponent","setVisible","showSingleMap","mapData","id","mapOptions","zoom","styles","scrollwheel","mapTypeId","eval","type","streetViewControl","mapTypeControlOptions","style","MapTypeControlStyle","DROPDOWN_MENU","mapTypeIds","Array","MapTypeId","ROADMAP","SATELLITE","HYBRID","TERRAIN","center","LatLng","centerLat","centerLng","Map","document","getElementById","event","addListener","this","setOptions","groups","groupsFound","point","getThemeJSON","Marker","lat","lng","title","icon","index","push","InfoWindow","content","initGoogleMaps","hidden","showMap","log","currentTarget","mapToShow","init","jQuery","debug","$mapElements","PrivacyPolicy","cookiesAccepted","each","$mapElement","data","hasOwnProperty","ratio","width","outerWidth","splits","split","wRatio","Number","hRatio","factor","height","outerHeight","attr","isElementHidden","removeClass","markDisabled","hideElement"],"mappings":"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","file":"mercury-map-google.js","sourcesContent":["/*\n * This program is part of the OpenCms Mercury Template.\n *\n * Copyright (c) Alkacon Software GmbH & Co. KG (http://www.alkacon.com)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// the global objects that must be passed to this module\nvar jQ;\nvar DEBUG;\n\n\"use strict\";\n\n// all initialized Google maps\nvar m_maps = {};\n\n// all map data sets found on the page, as array for easy iteration\nvar m_mapData = [];\n\n// map styling\nvar m_mapStyle = [];\n\n// API key for accessing the map data\nvar m_apiKey;\n\n// the Google geocode object, used for resolving coordinates to address names\nvar m_googleGeocoder = null;\n\nfunction showInfo(mapId, infoId) {\n\n    if (DEBUG) console.info(\"GoogleMap showInfo() called with map id: \" + mapId + \" info id: \" + infoId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        if (i != infoId) {\n            infoWindows[i].close();\n        } else {\n            if (infoWindows[i].geocode == \"true\") {\n                if (DEBUG) console.info(\"showInfo() geocode lookup for \" + mapId);\n                getGeocode(infoWindows[i]);\n                infoWindows[i].geocode = \"false\";\n            }\n            infoWindows[i].open(\n                map,\n                infoWindows[i].marker\n            );\n        }\n    }\n}\n\nfunction hideAllInfo(mapId) {\n\n    if (DEBUG) console.info(\"GoogleMap hideAllInfo() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    var infoWindows = map.infoWindows;\n    for (var i = 0; i < infoWindows.length; i++) {\n        infoWindows[i].close();\n    }\n}\n\nfunction setInfo(results, status, infoWindow) {\n\n    if (DEBUG) console.info(\"GoogleMap setInfo() geocode lookup returned status \" + status);\n    var addressFound = \"\";\n    if (status == google.maps.GeocoderStatus.OK) {\n        if (results[0]) {\n            addressFound = formatGeocode(results[0]);\n        }\n    } else {\n        console.warn(\"GoogleMap GeoCoder returned error status '\" + status + \"' for coordinates \" + infoWindow.marker.position);\n    }\n    // replace content in info window\n    var infoContent = infoWindow.getContent();\n    infoContent = infoContent.replace(\"<div class='geoAdr'></div>\", addressFound);\n    infoWindow.setContent(infoContent);\n}\n\nfunction formatGeocode(result) {\n\n    // returns the address from a geocode result in nicely formatted way\n    var street = \"\";\n    var strNum = \"\";\n    var zip = \"\";\n    var city = \"\";\n    var foundAdr = false;\n\n    for (var i = 0; i < result.address_components.length; i++) {\n        var t = String(result.address_components[i].types);\n        if (street == \"\" && t.indexOf(\"route\") != -1) {\n            street = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"street_number\") != -1) {\n            strNum = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (t.indexOf(\"postal_code\") != -1) {\n            zip = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n        if (city == \"\" && t.indexOf(\"locality\") != -1) {\n            city = result.address_components[i].long_name;\n            foundAdr = true;\n        }\n    }\n    if (foundAdr == true) {\n        return street + \" \" + strNum + \"<br/>\" + zip + \" \" + city;\n    } else {\n        return result.formatted_address;\n    }\n}\n\nfunction getGeocode(infoWindow) {\n\n    if (m_googleGeocoder == null) {\n        // initialize global geocoder object if required\n        m_googleGeocoder = new google.maps.Geocoder();\n    }\n\n    m_googleGeocoder.geocode({'latLng': infoWindow.marker.position}, function(results, status) {\n        setInfo(results, status, infoWindow);\n    });\n}\n\nfunction loadGoogleApi() {\n\n    var locale = Mercury.getInfo(\"locale\");\n    var mapKey = \"\"\n    if (m_apiKey != null) {\n        mapKey = \"&key=\" + m_apiKey;\n    }\n    var addLibs = \"\";\n    if (! Mercury.isOnlineProject()) {\n        // need to load places API for OpenCms map editor\n        addLibs = \"&libraries=places\"\n    }\n    if (DEBUG) console.info(\"GoogleMap API key: \" + (mapKey == '' ? '(undefined)' : mapKey));\n    jQ.loadScript(\"https://maps.google.com/maps/api/js?callback=GoogleMap.initGoogleMaps&language=\" + locale + addLibs + mapKey, {}, DEBUG);\n}\n\n\n// See: https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\nfunction shadeColor(color, percent) {\n\n    var f=parseInt(color.slice(1),16),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=f>>16,G=f>>8&0x00FF,B=f&0x0000FF;\n    return \"#\"+(0x1000000+(Math.round((t-R)*p)+R)*0x10000+(Math.round((t-G)*p)+G)*0x100+(Math.round((t-B)*p)+B)).toString(16).slice(1);\n}\n\n\nfunction getPuempel(color) {\n\n    var shade = shadeColor(color, -0.4);\n    return {\n        path: 'M0-37.06c-5.53 0-10 4.15-10 9.26 0 7.4 8 9.26 10 27.8 2-18.54 10-20.4 10-27.8 0-5.1-4.47-9.26-10-9.26zm.08 7a2.9 2.9 0 0 1 2.9 2.9 2.9 2.9 0 0 1-2.9 2.9 2.9 2.9 0 0 1-2.9-2.9 2.9 2.9 0 0 1 2.9-2.9z',\n        scale: 1,\n        fillOpacity: 1,\n        fillColor: color,\n        strokeColor: shade,\n        strokeWeight: 1\n    };\n}\n\n/****** Exported functions ******/\n\nexport function showMarkers(mapId, group) {\n\n    if (DEBUG) console.info(\"GoogleMap showMapMarkers() called with map id: \" + mapId);\n    var map = m_maps[mapId];\n    if (map) {\n        var markers = map.markers;\n        var g = decodeURIComponent(group);\n        hideAllInfo(mapId);\n        for (var i = 0; i < markers.length; i++) {\n            if (markers[i].group == g || g == 'showall') {\n                markers[i].setVisible(true);\n            } else {\n                markers[i].setVisible(false);\n            }\n        }\n    }\n}\n\nfunction showSingleMap(mapData){\n\n    var mapId = mapData.id;\n\n    if (DEBUG) console.info(\"GoogleMap initializing map: \" + mapId);\n    var mapOptions = {\n        zoom: parseInt(mapData.zoom),\n        styles: m_mapStyle,\n        scrollwheel: false,\n        mapTypeId: eval(\"google.maps.MapTypeId.\" + mapData.type),\n        streetViewControl: false,\n        mapTypeControlOptions: {\n            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n            mapTypeIds: new Array(\n                google.maps.MapTypeId.ROADMAP,\n                google.maps.MapTypeId.SATELLITE,\n                google.maps.MapTypeId.HYBRID,\n                google.maps.MapTypeId.TERRAIN\n            )\n        },\n        center: new google.maps.LatLng(mapData.centerLat, mapData.centerLng)\n    }\n\n    // create the map\n    var map = new google.maps.Map(document.getElementById(mapId), mapOptions);\n\n    // enable mouse wheel scrolling after click\n    google.maps.event.addListener(map, 'click', function(event){\n        this.setOptions({scrollwheel:true});\n    });\n\n    // map markers and info windows\n    var markers = [];\n    var infoWindows = [];\n    var groups = {};\n    var groupsFound = 0;\n\n    if (typeof mapData.markers != \"undefined\") {\n        for (var p=0; p < mapData.markers.length; p++) {\n\n            var point = mapData.markers[p];\n            var group = decodeURIComponent(point.group);\n            if (typeof groups[group] === \"undefined\" ) {\n                // Array? Object?\n                // see http://stackoverflow.com/questions/9526860/why-does-a-string-index-in-a-javascript-array-not-increase-the-length-size\n                var color = Mercury.getThemeJSON(\"map-color[\" + groupsFound++ + \"]\", \"#ffffff\");\n                if (DEBUG) console.info(\"GoogleMap new marker group added: \" + group + \" with color: \" + color);\n                groups[group] = getPuempel(color);\n            }\n\n            // get marker data from calling object\n            var marker = new google.maps.Marker({\n                position: new google.maps.LatLng(point.lat, point.lng),\n                map: map,\n                title: decodeURIComponent(point.title),\n                group: group,\n                icon: groups[group],\n                info: decodeURIComponent(point.info),\n                index: p,\n                mapId: mapId,\n                geocode: point.geocode\n            });\n\n            // add marker to marker map\n            markers.push(marker);\n\n            // initialize info window\n            var infoWindow = new google.maps.InfoWindow({\n                content: marker.info,\n                marker: marker,\n                geocode: point.geocode,\n                index: p\n            });\n\n            // add marker to marker map\n            infoWindows.push(infoWindow);\n\n            if (DEBUG) console.info(\"GoogleMap attaching Event lister: \" + p + \" to map id \" + mapId);\n\n            // attach event listener that shows info window to marker\n            // see http://you.arenot.me/2010/06/29/google-maps-api-v3-0-multiple-markers-multiple-infowindows/\n            marker.addListener('click', function() {\n                showInfo(this.mapId, this.index);\n            });\n        }\n    }\n\n    // store map in global array, required e.g. to select marker groups etc.\n    var map = {\n        'id': mapId,\n        'map': map,\n        'markers': markers,\n        'infoWindows': infoWindows\n    };\n    m_maps[mapId] = map;\n}\n\nexport function initGoogleMaps() {\n\n    if (DEBUG) console.info(\"GoogleMap initGoogleMaps() called with data for \" + m_mapData.length + \" maps!\" );\n       for (var i=0; i < m_mapData.length; i++) {\n         if(!m_mapData[i].hidden){\n             showSingleMap(m_mapData[i]);\n          }\n       }\n}\n\nfunction showMap(event){\n\n    // called by click on hidden map element in edit mode\n    if (DEBUG) {console.log(\"GoogleMap show map with id: \"+event.currentTarget.id);}\n    var mapToShow= event.currentTarget;\n\n    for(var i=0; i<m_mapData.length;i++){\n        if(m_mapData[i].id == mapToShow.id){\n            m_mapData[i].hidden=false;\n            showSingleMap(m_mapData[i]);\n        }\n    }\n}\n\n/****** Exported functions ******/\n\nexport function init(jQuery, debug) {\n\n    jQ = jQuery;\n    DEBUG = debug;\n\n    m_apiKey = Mercury.getInfo(\"googleApiKey\");\n\n    if (DEBUG) {\n        console.info(\"GoogleMap.init()\");\n        if (m_apiKey != null) {\n            // Goggle map key is read in mercury:pageinfo tag and read to JavaScript via Mercury.init()\n            console.info(\"GoogleMap API key is: \" + Mercury.getInfo(\"googleApiKey\"));\n        } else {\n            console.info(\"GoogleMap API key not set - Google maps not activated\");\n        }\n    }\n\n    var $mapElements = jQ('.map-google .mapwindow');\n    if (DEBUG) console.info(\"GoogleMap .map-google elements found: \" + $mapElements.length);\n\n    if ($mapElements.length > 0) {\n\n        if (m_apiKey != null) {\n\n            if (PrivacyPolicy.cookiesAccepted()) {\n\n                // initialize map style from JSON stored in CSS\n                m_mapStyle = Mercury.getThemeJSON(\"map-style\", []);\n\n                // initialize map sections with values from data attributes\n                $mapElements.each(function(){\n                    var $mapElement = jQ(this);\n\n                    if (typeof $mapElement.data(\"map\") != \"undefined\") {\n                        var mapData = $mapElement.data(\"map\");\n                        if (mapData.hasOwnProperty(\"ratio\")) {\n                            var ratio = mapData.ratio;\n                            var width = $mapElement.outerWidth();\n                            var splits = ratio.split(\"-\");\n                            var wRatio = Number(splits[0]);\n                            var hRatio = Number(splits[1]);\n                            var factor = hRatio / wRatio;\n                            var height = Math.round(width * factor);\n                            if (DEBUG) console.info(\"mapData ratio:\" + ratio + \" wR=\" + wRatio + \" hR=\" + hRatio + \" width=\" + width + \" height=\" + height);\n                            $mapElement.outerHeight(height);\n                        }\n                        mapData.id = $mapElement.attr(\"id\");\n                        mapData.hidden=Mercury.isElementHidden($mapElement, showMap);\n                        if (DEBUG) console.info(\"GoogleMap found with id: \" + mapData.id);\n                        m_mapData.push(mapData);\n                        $mapElement.removeClass('placeholder');\n                    }\n                });\n\n                // load the Google map API\n                loadGoogleApi();\n\n            } else {\n                if (DEBUG) console.info(\"GoogleMap cookies not accepted by the user - Google maps are disabled!\");\n\n                $mapElements.each(function() {\n                    var $mapElement =  jQ(this);\n                    $mapElement.removeClass('placeholder');\n                    PrivacyPolicy.markDisabled($mapElement);\n                });\n            }\n\n        } else {\n\n            // activate the hide message (no API key found)\n            $mapElements.each(function() {\n                var $mapElement = jQ(this);\n                if (typeof $mapElement.data(\"map\") != \"undefined\") {\n                    Mercury.hideElement($mapElement);\n                }\n            });\n        }\n    }\n}\n"],"sourceRoot":""}